#!@BASH@

usage() {
  echo
  echo Usage: $0
  echo
  echo "   Configures the environment for monitoring"
  echo
  echo Parameters:
  echo "   -e|--enable                   Enable Monitoring Context."
  echo "   -d|--disable                  Disable Monitoring Context."
  echo "   -h|--help                     Display this help text."
  echo
}

if [ "`whoami`" != root ]
then
  echo "You must be root in order to run this script."
  exit 4
fi

SIPX_USER=@SIPXPBXUSER@
SIPX_VARDIR=@SIPX_VARDIR@
SIPX_CONFDIR=@SIPX_CONFDIR@
SIPXCONFIG_PROPERTIES_IN=$SIPX_CONFDIR/sipxconfig.properties.in


ENABLE_MONITORING="false"
DISABLE_MONITORING="false"


# Process the command-line arguments.
while [ $# -ne 0 ]
do
  case ${1} in
    -h|--help)
      usage
      exit
      ;;

    -e|--enable)
      if test $DISABLE_MONITORING = "true"; then
        bad_usage
      else
        ENABLE_MONITORING="true"
      fi
      ;;

    -d|--disable)
      if test $ENABLE_MONITORING = "true"; then
        bad_usage
      else
        DISABLE_MONITORING="true"
      fi
      ;;

    *)
      echo "Unknown option: ${1}"
      bad_usage
      ;;
    esac
  shift # always consume one argument
done


if test $ENABLE_MONITORING = "true"; then
  sed 's/\(^monitoringContextImpl.enabled=\)false/\1true/' -i.org $SIPXCONFIG_PROPERTIES_IN
fi

if test $DISABLE_MONITORING = "true"; then
  if test -f $SIPXCONFIG_PROPERTIES_IN; then
    sed 's/\(^monitoringContextImpl.enabled=\)true/\1false/' -i.org $SIPXCONFIG_PROPERTIES_IN
  fi
  exit 0
fi

#########################################
# MRTG CONFIGURATION 
#########################################

if [ -d /etc/mrtg ]
then
  chown $SIPX_USER:$SIPX_USER /etc/mrtg/
  cd /etc/mrtg
  if [ -f mrtg.cfg ]
  then 
    mv mrtg.cfg mrtg.cfg.old
  fi
  cat > ./mrtg.cfg <<EOF
WorkDir: $SIPX_VARDIR/mrtg

EOF
  chown $SIPX_USER:$SIPX_USER ./mrtg.cfg

  cat > ./mrtg-t.cfg <<EOF
EnableIPv6: no
LoadMibs: /usr/share/snmp/mibs/UCD-SNMP-MIB.txt, /usr/share/snmp/mibs/TCP-MIB.txt
workdir : $SIPX_VARDIR/mrtg

#
# Server CPU Load
#
Target[cpuutil]:ssCpuRawUser.0&ssCpuRawUser.0:\$(snmpString)@\$(host)
Title[cpuutil]: target.cpuLoad
MaxBytes[cpuutil]: 100
PageTop[cpuutil]: <H1>Server CPU Load</H1>
ShortLegend[cpuutil]: %
YLegend[cpuutil]: CPU Utilization
Legend1[cpuutil]: Current CPU percentage load
LegendI[cpuutil]: Used
LegendO[cpuutil]:
Options[cpuutil]: growright,nopercent
Unscaled[cpuutil]: ymwd

#
# Server CPU Percent usage
#
Target[machine]:ssCpuRawUser.0&ssCpuRawUser.0:\$(snmpString)@\$(host) + ssCpuRawSystem.0&ssCpuRawSystem.0:\$(snmpString)@\$(host) + ssCpuRawNice.0&ssCpuRawNice.0:\$(snmpString)@\$(host)
Title[machine]: target.cpuBusy
Ytics[machine]: 10
PageTop[machine]: <h1>CPU busy percentage</h1>
MaxBytes[machine]: 100
YLegend[machine]: CPU busy %
ShortLegend[machine]: &nbsp;
LegendI[machine]: Processes
LegendO[machine]:
Legend1[machine]:Processes
Options[machine]: growright,nopercent

#
# Memory Monitoring
#
Target[memgraph]: memAvailReal.0&memTotalReal.0:\$(snmpString)@\$(host)
Title[memgraph]: target.memoryFree
PageTop[memgraph]: <H1> Free Memory </H1>
MaxBytes[memgraph]: 10000000000
ShortLegend[memgraph]: B
YLegend[memgraph]: Bytes
LegendI[memgraph]: Free
LegendO[memgraph]: Total
Legend1[memgraph]: Free memory (not including swap) in bytes
Legend2[memgraph]: Total memory
Options[memgraph]: gauge,growright,nopercent
kMG[memgraph]: k,M,G,T,P,X

#
# Memory Monitoring (Percent usage)
#
Target[mempercent]: (memAvailReal.0&memAvailReal.0:\$(snmpString)@\$(host)) * 100 / (memTotalReal.0&memTotalReal.0:\$(snmpString)@\$(host))
Title[mempercent]: target.memoryPercentage
PageTop[mempercent]: <H1> Percentage Free Memory </H1>
options[mempercent]: growright,gauge,transparent,nopercent
Unscaled[mempercent]: ymwd
MaxBytes[mempercent]: 100
YLegend[mempercent]: Memory %
ShortLegend[mempercent]: %
LegendI[mempercent]: Free
Legend1[mempercent]: Percentage Free Memory

#
# New TCP Connection Monitoring (per minute)
#
Target[newconns]: tcpPassiveOpens.0&tcpActiveOpens.0:\$(snmpString)@\$(host)
Title[newconns]: target.tcpConnectionsNewly
PageTop[newconns]: <H1> New TCP Connections </H1>
MaxBytes[newconns]: 10000000000
ShortLegend[newconns]: c/s
YLegend[newconns]: Conns / Min
LegendI[newconns]: In
LegendO[newconns]: Out
Legend1[newconns]: New inbound connections
Legend2[newconns]: New outbound connections
Options[newconns]: growright,nopercent,perminute


#
# Established TCP Connections
#
Target[estabcons]: tcpCurrEstab.0&tcpCurrEstab.0:\$(snmpString)@\$(host)
Title[estabcons]: target.tcpConnectionsCurrently
PageTop[estabcons]: <H1> Established TCP Connections </H1>
MaxBytes[estabcons]: 10000000000
ShortLegend[estabcons]:
YLegend[estabcons]: Connections
LegendI[estabcons]: In
LegendO[estabcons]:
Legend1[estabcons]: Established connections
Legend2[estabcons]:
Options[estabcons]: growright,nopercent,gauge


#
# Disk Usage Monitoring
#
target[disk]: dskPercent.1&dskPercent.1:\$(snmpString)@\$(host)
title[disk]: target.diskUsage
pagetop[disk]: <H1> Disk usage % </H1>
maxbytes[disk]: 100
shortlegend[disk]: %
ylegend[disk]: Disk Utilization %
Legend1[disk]: Root disk
legendi[disk]: Root disk
options[disk]: gauge,growright,nopercent
unscaled[disk]: ymwd

LogFormat: rrdtool
PathAdd: /usr/bin

EOF

  chown $SIPX_USER:$SIPX_USER ./mrtg-t.cfg
else
  echo "Directory /etc/mrtg does not exist. Please verify your mrtg instalation"
  echo "Exiting ..."
  exit
fi

mkdir -p $SIPX_VARDIR/mrtg
chown $SIPX_USER:$SIPX_USER $SIPX_VARDIR/mrtg/
