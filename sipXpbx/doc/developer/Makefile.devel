# Makefile for doing various tasks to build and install sipX.

# When running command groups, the value of the PREFIX variable will
# be passed to any ./configure as "--prefix=$(PREFIX)".
# Remember to set PREFIX to the same value on all later builds, or
# edit its default value below.

# The sipX sources can be fetched using 'checkout' command group.
# If you want a specific branch or tag, set the BRANCH variable.

# The command groups to help configure an installed sipX have been
# moved to Makefile.config (which is built from Makefile.config.in),
# so that they can be substituted with the correct locations for the
# config files.

# So to do a complete build and install of sipX, you can do:
#    # Create the top directory of the working copy.
#    mkdir working-copy
#    cd working-copy
#    # Check out the source from the repository.
#    make -f [some copy of Makefile.devel somewhere] checkout
#    # Build and install the software.
#    make -f sipXpbx/doc/developer/Makefile.devel build-check-install

# This file assumes that all of the auxiliary open-source packages have been
# installed in their ordinary (system) locations.  If not, you may
# have to adjust some of the following variable assignments, or add
# "with" arguments for ./configure to the CONFIGURE_FLAGS variable.
CONFIGURE_FLAGS=

# If the $(PREFIX)/lib/httpd/modules directory exists, use it as the Apache
# modules directory.
ifneq ($(PREFIX),)
ifneq ($(wildcard $(PREFIX)/lib/httpd/modules),)
CONFIGURE_FLAGS+=--with-apache-modules=$(PREFIX)/lib/httpd/modules
endif
endif

# Environment variables used by some of the components
export ANT_HOME=/opt/apache-ant-1.6.2
export JAVA_HOME=/usr/java/j2sdk1.4.2_09
export JBOSS_HOME=/opt/jboss-4.0.0
export SPRING_HOME=/opt/spring-framework-1.1.2

# A list of all the sipX components, in the dependency order that they have
# to be built in.
# For the full dependency order, see http://www.sipfoundry.org/sipX/index.html
COMPONENTS=sipXportLib sipXtackLib sipXmediaLib \
	sipXmediaAdapterLib sipXcallLib \
	sipXcommserverLib sipXvxml sipXconfig sipXregistry sipXproxy \
	sipXpublisher sipXpbx sipXacd

# The Subversion repository from which the source will be fetched by
# 'checkout'.
# Use https: access so that changes can be checked back in.
REPOSITORY=https://paradise.pingtel.com/rep/sipX/pingtel

# Environment variables for global configuration
# Example:
# Turn off compiler optimization.  Put in debugging information.
export CFLAGS=-O0 -g
export CXXFLAGS=-O0 -g

# Environment variable to set the user who will own the installed files.
# Default to the current user.
export SIPXPBXUSER=${USER}

# $PREFIX is the directory into which the software will be installed.
PREFIX=
# $(PREFIX_ARG) is the --prefix argument to ./configure, if any,
ifeq ($(PREFIX),)
    PREFIX_ARG=
else
    PREFIX_ARG=--prefix=$(PREFIX)
endif

# Define $SUDO as the prefix to commands that runs any necessary sudo, etc.
# needed for installing files.
SUDO=
# Example: If you need to use 'sudo':
#SUDO=sudo

.PHONY: checkout update status status-u showversions build build-install \
	build-check-install build-only make-install install rpm \
	$(COMPONENTS)

## The default action is to build all the components.
build: build-check-install

# For every component name, a group to build-check-install it.
# sipXportLib: sipXportLib-build-check-install
# ...
$(foreach C,$(COMPONENTS),$(C)): %: %-build-check-install

# Command groups to perform various Subversion activities.

# Check out all the components to create the sipX directory.
# The branch identifier to check out, e.g., "main", "branches/2.6",
# "tag/2.6.001b", etc.
BRANCH=main
checkout:
	svn checkout --quiet $(REPOSITORY)/$(BRANCH) sipX

# "svn switch" all the components
# The branch identifier to switch to is specified by BRANCH.  (See above.)
switch:
	svn switch $(REPOSITORY)/$(BRANCH) .

# Update all the components (that are already checked out)
update:
	svn update

# Show the status of all the components
status:
	svn status | \
	grep -Ev '^$$|^Performing status on external item at |^X      '
status-u:
	svn status -u | \
	grep -Ev '^$$|^Performing status on external item at |^X      '

# Clean all the components.
distclean:
	for d in $(COMPONENTS) ; do if [ -f $$d/Makefile ] ; then make -C $$d distclean ; fi ; done

# Print the svnversion info for all the components.
svnversion:
	svnversion .

# Print the differences from the BASE revision.
diff:
	svn diff

# Command groups to perform various subsets of actions for building
# each component.

# build-check-install: sipXportLib-build-check-install ...
build-check-install: $(foreach C,$(COMPONENTS),$(C)-build-check-install)

# sipXportLib-build-check-install:
# ...
$(foreach C,$(COMPONENTS),$(C)-build-check-install): %-build-check-install:
	cd $(subst -build-check-install,,$@) ; autoreconf --install --force
	cd $(subst -build-check-install,,$@) ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd $(subst -build-check-install,,$@) ; make
	cd $(subst -build-check-install,,$@) ; make check
	cd $(subst -build-check-install,,$@) ; $(SUDO) make install

# build-install: sipXportLib-build-install ...
build-install: $(foreach C,$(COMPONENTS),$(C)-build-install)

# sipXportLib-build-install:
# ...
$(foreach C,$(COMPONENTS),$(C)-build-install): %-build-install:
	cd $(subst -build-install,,$@) ; autoreconf --install --force
	cd $(subst -build-install,,$@) ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd $(subst -build-install,,$@) ; make
	cd $(subst -build-install,,$@) ; $(SUDO) make install

# make-install: sipXportLib-make-install ...
make-install: $(foreach C,$(COMPONENTS),$(C)-make-install)

# sipXportLib-make-install:
# ...
$(foreach C,$(COMPONENTS),$(C)-make-install): %-make-install:
	cd $(subst -make-install,,$@) ; make
	cd $(subst -make-install,,$@) ; $(SUDO) make install

# install: sipXportLib-install ...
install: $(foreach C,$(COMPONENTS),$(C)-install)

# sipXportLib-install:
# ...
$(foreach C,$(COMPONENTS),$(C)-install): %-install:
	cd $(subst -install,,$@) ; $(SUDO) make install

## Since these targets do not install, these builds use obsolete .h files.

# build-check: sipXportLib-build-check ...
build-check: $(foreach C,$(COMPONENTS),$(C)-build-check)

# sipXportLib-build-check:
# ...
$(foreach C,$(COMPONENTS),$(C)-build-check): %-build-check:
	cd $(subst -build-check,,$@) ; autoreconf --install --force
	cd $(subst -build-check,,$@) ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd $(subst -build-check,,$@) ; make
	cd $(subst -build-check,,$@) ; make check

# We have to call this group 'build-only' because 'build' is a synonym
# of 'build-check-install'.
# build-only: sipXportLib-build ...
build-only: $(foreach C,$(COMPONENTS),$(C)-build)

# sipXportLib-build:
# ...
$(foreach C,$(COMPONENTS),$(C)-build): %-build:
	cd $(subst -build,,$@) ; autoreconf --install --force
	cd $(subst -build,,$@) ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd $(subst -build,,$@) ; make
	cd $(subst -build,,$@) ; make check

# The rpm --install's install both the binary and the devel RPMs of
# the libraries.

# Where rpmbuild will do its work.
RPMBUILD_TOPDIR = $(shell rpm --eval '%{_topdir}')

# rpm: sipXportLib-rpm ...
rpm: $(foreach C,$(COMPONENTS),$(C)-rpm)

# sipXportLib-rpm:
# ...
# The RPM name is downcased.
$(foreach C,$(COMPONENTS),$(C)-rpm): %-rpm:
	cd $(subst -rpm,,$@) ; make rpm
	sudo rpm --install -p $(subst -rpm,,$@)/*.i386.rpm

# Command groups to test the code base for various violations of the
# coding standards.

# Check that the rules for tabs have not been violated
# The complex 'find' selects the files within which we want to enforce the
# ban on tabs.  The '-prune -false -o -type f' construction prevents
# recursion into directories of specified names, but also restricts the
# output of the find to ordinary files.  The long list of -name's before
# it is the list of directory names that will not be examined.
# The next list of -name's specify which files will not be examined.
# The first xargs ... grep selects files containing at least one tab.
# (The construction "$$'\t'" is a way to specify a tab (in bash) without
# using one.)  The second xargs ... grep removes files with a SpeechWorks
# copyright, as they are part of VXI.  The final grep is to produce a
# correct exit code, as grep --files-without-match doesn't exit 0/1
# based on whether any file names are output or not.
enforce-tabs:
	! find sipXregistry sipXvxml \
		\( \( -name .svn -o \
			-name jsi -o \
			-name VXI -o \
			-name js -o \
			-name meta -o \
			-name doc -o \
			-name config -o \
			-name autom4te.cache \) -prune -false -o -type f \) \
		! \( -name 'Makefile*' -o \
			-name '*.o' -o \
			-name '*.lo' -o \
			-name '*.so' -o \
			-name '*.so.[0-9]*' -o \
			-name '*.a' -o \
			-name '*.class' -o \
			-name '*.jar' -o \
			-name '*.gif' -o \
			-name COPYING -o \
			-name LICENSE -o \
			-name aclocal.m4 -o \
			-name configure -o \
			-name config.log -o \
			-name config.status -o \
			-name sipXvxml -o \
			-name sipregistrar -o \
			-name libtool \) \
		-print0 | \
	xargs --null grep --null --files-with-matches $$'\t' | \
	xargs --null grep --files-without-match SpeechWorks | \
	grep '.'

# Use a trick to make sure that "NO$(NULL)NE" does not appear in this makefile.
NULL=

# Search for occurrences of NO$(NULL)NE in the makefiles, which indicate an
# incorrect substitution of a configure variable (usually ${prefix}
# for which the user did not give an option to ./configure.
search-NO$(NULL)NE:
	! grep -n NO$(NULL)NE \
		$$( find sipX* -name '.svn' -prune -false -o -name Makefile ) | \
	grep '.'

# Search for un-substituted variables that should have been substituted.
# Currently, only checks for @... variables in the install directory.
search-unsubstituted:
	! grep -rE --binary-files=without-match '@[A-Za-z]+@' /usr/local/sipx | \
	grep '.'

# Copy the Apache modules to $PREFIX/lib/httpd/modules so this sandbox can have
# a custom version.
# Must be executed before configuring and building the software.
# Unfortunately, we have to guess where the modules are installed, since
# this makefile isn't customized by ./configure.
create-local-modules:
	mkdir -p $(PREFIX)/lib/httpd/modules
	cp /usr/lib/httpd/modules/* $(PREFIX)/lib/httpd/modules

# Display the value of a variable as 'make' has it set up.
show.%:
	@echo $*=$($*)

# Instantiate a label file for all the projects by putting symbolic links in
# */meta/$LABEL.configure-switches.
# If ./$LABEL does not exist, create it and initialize it with
# $CONFIGURE_FLAGS.
# The default label file name is "SWITCHES".
LABEL=SWITCHES
create-label:
	[ -e ./$(LABEL) ] || echo $(CONFIGURE_FLAGS) >./$(LABEL)
	for C in $(COMPONENTS) ; \
	    do \
	    [ ! -d $$C/meta ] || \
		ln -s ../../$(LABEL) $$C/meta/$(LABEL).configure-switches ; \
	done
