This patch adds a function to sipXrls to publish test content.
The URI is <sip:-@[sip domain]>, the MIME type is text/plain, and the
event is "dialog".
The published content is updated every 15 seconds.
Remember that PeriodicPublisherTask does not start until the main line
of sipxrls does, 120 seconds after the process is started.

Index: sipXpbx/sipXrls/src/PeriodicPublisherTask.cpp
===================================================================
--- sipXpbx/sipXrls/src/PeriodicPublisherTask.cpp	(revision 0)
+++ sipXpbx/sipXrls/src/PeriodicPublisherTask.cpp	(revision 0)
@@ -0,0 +1,130 @@
+// 
+// 
+// Copyright (C) 2009 Pingtel Corp., certain elements licensed under a Contributor Agreement.  
+// Contributors retain copyright to elements licensed under a Contributor Agreement.
+// Licensed to the User under the LGPL license.
+// 
+// $$
+////////////////////////////////////////////////////////////////////////////
+
+// SYSTEM INCLUDES
+
+#include <time.h>
+
+// APPLICATION INCLUDES
+
+#include <os/OsSysLog.h>
+#include <os/OsEventMsg.h>
+#include <os/OsMsg.h>
+#include <net/HttpBody.h>
+#include "PeriodicPublisherTask.h"
+
+// EXTERNAL FUNCTIONS
+// EXTERNAL VARIABLES
+// CONSTANTS
+// STATIC VARIABLE INITIALIZATIONS
+
+
+/* //////////////////////////// PUBLIC //////////////////////////////////// */
+
+/* ============================ CREATORS ================================== */
+
+// Constructor
+PeriodicPublisherTask::PeriodicPublisherTask(SipPublishContentMgr* publisher,
+                                             const UtlString& resourceId,
+                                             const UtlString& eventTypeKey,
+                                             const UtlString& eventType,
+                                             int period) :
+   OsTask("PeriodicPublisherTask-%d"),
+   mPublisher(publisher),
+   mResourceId(resourceId),
+   mEventTypeKey(eventTypeKey),
+   mEventType(eventType),
+   mPeriod(period)
+{
+   OsSysLog::add(FAC_SIP, PRI_DEBUG,
+                 "PeriodicPublisherTask::_ mEventTypeKey = '%s', mEventType = '%s', mPeriod = %d",
+                 eventTypeKey.data(), eventType.data(), period);
+}
+
+// Destructor
+PeriodicPublisherTask::~PeriodicPublisherTask()
+{
+}
+
+/* ============================ MANIPULATORS ============================== */
+
+/* ============================ ACCESSORS ================================= */
+
+/* ============================ INQUIRY =================================== */
+
+/* //////////////////////////// PROTECTED ///////////////////////////////// */
+
+// The entry point for the task.
+// This method executes a message processing loop until either
+// requestShutdown(), deleteForce(), or the destructor for this object
+// is called.
+int PeriodicPublisherTask::run(void* pArg)
+{
+   // Dummy array of integers for event versions.
+   int dummyEventVersion[1] = { 0 };
+   // Array for event content.
+   HttpBody* eventContent[1];
+   // Time value storage
+   struct tm tm;
+   char buffer[50];
+   time_t t;
+
+   do
+   {
+      // Construct content.
+      time(&t);
+      gmtime_r(&t, &tm);
+      sprintf(buffer,
+              "version=&version\r\n"
+              "%02d:%02d:%02d\r\n",
+              tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+      // Publish content as both full and partial state, since dialog events
+      // enable sending of partial state.
+      eventContent[0] = new HttpBody(buffer, strlen(buffer), "text/plain");
+      mPublisher->publish(mResourceId,
+                          mEventTypeKey,
+                          mEventType,
+                          1,
+                          eventContent,
+                          dummyEventVersion,
+                          FALSE, // noNotify
+                          TRUE // fullState
+         );
+      eventContent[0] = new HttpBody(buffer, strlen(buffer), "text/plain");
+      mPublisher->publish(mResourceId,
+                          mEventTypeKey,
+                          mEventType,
+                          1,
+                          eventContent,
+                          dummyEventVersion,
+                          FALSE, // noNotify
+                          FALSE // fullState
+         );
+      // Do not delete *eventContent[0], because mPublisher now owns it.
+
+      // Wait as many seconds as specified.
+      for (int count = 0;
+           count < mPeriod && isStarted();
+           count++)
+      {
+         // Wait 1 second.
+         OsTask::delay(1000);
+      }
+   }
+   while (isStarted());
+
+   return 0;        // and then exit
+}
+
+/* //////////////////////////// PRIVATE /////////////////////////////////// */
+
+/* ============================ TESTING =================================== */
+
+/* ============================ FUNCTIONS ================================= */

Property changes on: sipXpbx/sipXrls/src/PeriodicPublisherTask.cpp
___________________________________________________________________
Name: svn:mime-type
   + text/plain
Name: svn:eol-style
   + native

Index: sipXpbx/sipXrls/src/ResourceListServer.cpp
===================================================================
--- sipXpbx/sipXrls/src/ResourceListServer.cpp	(revision 15052)
+++ sipXpbx/sipXrls/src/ResourceListServer.cpp	(working copy)
@@ -28,7 +28,10 @@
 
 const UtlContainableType ResourceListServer::TYPE = "ResourceListServer";
 
+#include "PeriodicPublisherTask.h"
+static PeriodicPublisherTask* spPeriodicPublisherTask;
 
+
 /* //////////////////////////// PUBLIC //////////////////////////////////// */
 
 /* ============================ CREATORS ================================== */
@@ -229,6 +232,16 @@
          FALSE // outgoing
    );
 
+   UtlString ppUri;
+   ppUri.append("sip:-@");
+   ppUri.append(mDomainName);
+   spPeriodicPublisherTask = new PeriodicPublisherTask(&getEventPublisher(),
+                                                       ppUri,
+                                                       getEventType(),
+                                                       getEventType(),
+                                                       15);
+   spPeriodicPublisherTask->start();
+
    OsSysLog::add(FAC_RLS, PRI_DEBUG, "ResourceListServer::_ Initialization done.");
 }
 
@@ -241,6 +254,12 @@
                  "ResourceListServer::shutdown this = %p",
                  this);
 
+   spPeriodicPublisherTask->requestShutdown();
+   while (!spPeriodicPublisherTask->isShutDown())
+   {
+      OsTask::delay(100);
+   }
+
    // Probably best not to delete the resources in the resource lists so that
    // we do not send NOTIFYs to the clients showing the lists as empty.
    // Instead, we force the subscribe server to just tell the subscribers
@@ -266,9 +285,9 @@
    mServerUserAgent.shutdown(FALSE);
    mClientUserAgent.shutdown(FALSE);
    mResourceListTask.requestShutdown();
-   while(!(mServerUserAgent.isShutdownDone() &&
-           mClientUserAgent.isShutdownDone() &&
-           mResourceListTask.isShutDown()))
+   while (!(mServerUserAgent.isShutdownDone() &&
+            mClientUserAgent.isShutdownDone() &&
+            mResourceListTask.isShutDown()))
    {
       OsTask::delay(100);
    }
Index: sipXpbx/sipXrls/src/test/Makefile.am
===================================================================
--- sipXpbx/sipXrls/src/test/Makefile.am	(revision 15052)
+++ sipXpbx/sipXrls/src/test/Makefile.am	(working copy)
@@ -15,7 +15,7 @@
    @SIPXUNIT_LIBS@ \
    @SIPXCOMMSERVERTEST_LIBS@ \
    @SIPXCOMMSERVER_LIBS@ 
-   
+
 testsuite_CXXFLAGS = \
 	$(COMMON_CXX_FLAGS)
 
@@ -35,6 +35,7 @@
     ../ResourceSubscriptionReceiver.cpp \
     ../RlsSubscribePolicy.cpp \
     ../SubscriptionSet.cpp \
+    ../PeriodicPublisherTask.cpp \
     RlsTestFixtures.cpp \
     ResourceListServerTest.cpp
 
@@ -63,6 +64,3 @@
 #sandbox_CXXFLAGS = $(testsuite_CXXFLAGS)
 #sandbox_SOURCES = \
 #   ResourceListServerTest.cpp
-
-
-
Index: sipXpbx/sipXrls/src/PeriodicPublisherTask.h
===================================================================
--- sipXpbx/sipXrls/src/PeriodicPublisherTask.h	(revision 0)
+++ sipXpbx/sipXrls/src/PeriodicPublisherTask.h	(revision 0)
@@ -0,0 +1,81 @@
+// 
+// 
+// Copyright (C) 2008 Pingtel Corp., certain elements licensed under a Contributor Agreement.  
+// Contributors retain copyright to elements licensed under a Contributor Agreement.
+// Licensed to the User under the LGPL license.
+// 
+// $$
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef _PeriodicPublisherTask_h_
+#define _PeriodicPublisherTask_h_
+
+// SYSTEM INCLUDES
+// APPLICATION INCLUDES
+
+#include <os/OsTask.h>
+#include <net/SipPublishContentMgr.h>
+
+// DEFINES
+// MACROS
+// EXTERNAL FUNCTIONS
+// EXTERNAL VARIABLES
+// CONSTANTS
+// STRUCTS
+// TYPEDEFS
+// FORWARD DECLARATIONS
+
+class PeriodicPublishServer;
+
+
+class PeriodicPublisherTask : public OsTask
+{
+/* //////////////////////////// PUBLIC //////////////////////////////////// */
+public:
+
+/* ============================ CREATORS ================================== */
+
+   PeriodicPublisherTask(/// SipPublishContentMgr with which to publish the content
+                         SipPublishContentMgr* publisher,
+                         /// URI to use as the resourceId
+                         const UtlString& resourceId,
+                         const UtlString& eventTypeKey,
+                         const UtlString& eventType,
+                         /// Period (in seconds) between publish'es.
+                         int period);
+
+   ~PeriodicPublisherTask();
+
+/* ============================ MANIPULATORS ============================== */
+
+/* ============================ ACCESSORS ================================= */
+
+/* ============================ INQUIRY =================================== */
+
+/* //////////////////////////// PROTECTED ///////////////////////////////// */
+protected:
+
+   int run(void* pArg);
+
+/* //////////////////////////// PRIVATE /////////////////////////////////// */
+private:
+    
+   SipPublishContentMgr* mPublisher;
+
+   /// URI to use as the resourceId
+   const UtlString mResourceId;
+   /// Event type.
+   const UtlString mEventTypeKey;
+   const UtlString mEventType;
+   /// Period (in seconds) between publish'es.
+   const int mPeriod;
+
+   PeriodicPublisherTask(const PeriodicPublisherTask& rPeriodicPublisherTask);
+   //:Copy constructor
+
+   PeriodicPublisherTask& operator=(const PeriodicPublisherTask& rPeriodicPublisherTask);
+   //:Assignment operator
+
+};
+
+#endif  // _PeriodicPublisherTask_h_

Property changes on: sipXpbx/sipXrls/src/PeriodicPublisherTask.h
___________________________________________________________________
Name: svn:mime-type
   + text/plain
Name: svn:eol-style
   + native

Index: sipXpbx/sipXrls/src/Makefile.am
===================================================================
--- sipXpbx/sipXrls/src/Makefile.am	(revision 15052)
+++ sipXpbx/sipXrls/src/Makefile.am	(working copy)
@@ -37,7 +37,8 @@
 	ResourceReference.cpp \
 	ResourceSubscriptionReceiver.cpp \
 	RlsSubscribePolicy.cpp \
-	SubscriptionSet.cpp
+	SubscriptionSet.cpp \
+	PeriodicPublisherTask.cpp
 
 noinst_HEADERS = \
 	ContactSet.h \
@@ -55,6 +56,7 @@
 	ResourceSubscriptionReceiver.h \
 	RlsSubscribePolicy.h \
 	SubscriptionSet.h \
-	main.h
+	main.h \
+	PeriodicPublisherTask.h
 
 install-exec-hook :
