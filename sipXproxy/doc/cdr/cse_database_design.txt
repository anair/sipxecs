Call State Event Database Design Specification

  Functional requirements

    - Events that are now being written to an XML log can be
      logged into a Postgres call state event database if the proxies
      are configured to enable CSE database logging.

      No vias are recorded.

  Design notes

    1. Design Postgres database schema

      1.1 Schema file (Postgres-specific) is in
          sipXproxy/etc/database/schema.sql

        Two tables in the SIPXCDR database hold call state events and
        call state observer events. The table names are

          - call_state_events
          - call_state_observer_events

      1.2 Observer events

        The call_state_observer_events table contains events that signal 
        changes in the observer(auth proxy and forking proxy) that may be
        useful to the interpretation of call state events. At this time only
        one event is defined, the observer restart event that gets generated
        when the observer starts up.

      1.3 Call state events

        The call_state_events table contains 4 types of call events. The 
        fields describing each call event are

        observer       The DNS name of the system that observed the event.
        event_seq      The sequence number of this event at the observer.
                       This is used by a collector to detect that events 
                       from an observer are missing.
        event_time     The (UTC) time at the observer when this event 
                       occurred.
        event_type     Determines the type of call state event. Values are
                       'R' - Call Request, generated by the proxy server
                             when an INVITE request is received that does
                             not have a tag parameter on the TO field value.
                       'S' - Call Setup, generated when a 200 OK is received.
                       'E' - Call End, generated by any BYE request.
                       'T' - Call Transfer, generated by an REFER request.
                       'F' - Call Failure, generated by any 5xx or 6xx 
                             response to an INVITE request, or any 4xx 
                             response to an INVITE - except
                    
                                401 Authentication Required
                                407 Proxy Authentication Required
                                408 Request timeout

        call_id        Value from the SIP Call-Id header. 
        from_tag       Value from the tag attribute of the SIP From header
                       (may not appear in all events).
        to_tag         Value from the tag attribute of the SIP To header.
                       (element is optional and will not appear in all events.
        from_url       Full From header field value.
        to_url         Full To header field value.
        contact        Contact header field value. For Call Request this is
                       the calling party, for Call Setup this is the called
                       party.
        refer_to       Refer-To header field value, filled in on a REFER 
                       request.
        referred_by    Referred-By header field value, filled in on a REFER
                       request.
        failure_status Only relevant in Call Failure events, contains the
                       4xx, 5xx, or 6xx status code.
        failure_reason Only relevant in Call Failure events, contains the
                       string corresponding to the failure_status value.


    2. Design API for ODBC access (write only - read functions needed 
       for unit tests). Connections will be 'DSN-less' with specifying
       database name, host name, and driver so no global odbc.ini 
       configuration file is needed.

      2.1 API for ODBC access

        // Connects to database and returns a handle
        OdbcHandle odbcConnect(const char* dbname,
                               const char* servername,
                               const char* username,
                               const char* driver,
                               const char* password=NULL);

        // Disconnects from database and frees all associated memory
        void odbcDisconnect(OdbcHandle &handle);

        // Execute SQL statement, return true or false depending on success
        bool odbcExecute(const OdbcHandle handle,
                         const char* sqlStatement);

        // Retrieve number of columns in result set
        int odbcResultColumns(const OdbcHandle handle);

        // Move to next result row, reset by new result set generating 
        // statement. Returns true while there is a next row to move to.
        bool odbGetNextRow(const OdbcHandle handle);

        // Get column data from current row as string
        bool odbcGetColumnStringData(const OdbcHandle handle,
                                     int columnIndex,
                                     char* data,
                                     int dataSize);

        // Clear result set - necessary to execute new fetch statement
        bool odbcClearResultSet(const OdbcHandle handle);


    3. Implement ODBC API

      3.1 Define structure containing ODBC-specific data (handles etc.),
          used internally for ODBC connectivity and encapsulated by a
        single handle OdbcHandle that is used in the API to access the
        database.

      3.2 Implement database access functions.
      
      3.3 Unit tests
        
        - Only enable ODBC unit tests for local builds, not automated builds
        - Check connectivity on localhost
        - Check for validity of inserted data


    4. Implement configuration parameters in sipXproxy

      4.1 Add a entry for ODBC output in the proxy configuration file. 
          Either XML or database option must be set for logging. If both 
          are set only the database option will take effect.

        Configuration parameters in sipXproxy-config are: 
  
        - SIPX_PROXY_CALL_STATE_DB : DISABLE/ENABLE

            ENABLE will direct CSE logging to PostgreSQL database "SIPXCDR".
            (default: DISABLE)

        - SIPX_PROXY_CALL_STATE_DB_HOST : [hostname]

            If not specified will default to "localhost", can be used in the 
            future to have CSE database located on another server.


    5. Implement call state database logging for Forking/Auth proxy

      5.1 Derive from existing CallStateEventBuilder class, building
          a CallStateEventBuilder_DB class. When logging call state events
          to a database the observer will use the ODBC abstraction layer 
          implemented in the sipXcommserverLib.

          Implement a base CallStateEventWriter class and derive specialized
          files and database writer classes. These classes encapsulate the 
          entire writing operation and can be extended to implement buffered 
          batch writes if necessary.

          Add detection and logging of REFER request, record the refer-to
          field.

          Implement local unit testing mechanism of running proxies with 
          script-generated calls.
