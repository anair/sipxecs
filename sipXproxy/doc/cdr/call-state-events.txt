


SIPfoundry sipXproxy                                         S. Lawrence
                                                           Pingtel Corp.
                                                        December 7, 2004


               sipXproxy Call State Events Specification


Abstract

   Specifies the Call State Events detected by the sipXproxy; these
   can be used to construct Call Detail Records (CDRs) or other
   indications or records of call state.

Table of Contents

   1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  2
     1.1   Common Elements  . . . . . . . . . . . . . . . . . . . . .  2
   2.  Observer Message . . . . . . . . . . . . . . . . . . . . . . .  3
   3.  Call State Events  . . . . . . . . . . . . . . . . . . . . . .  3
     3.1   Call Request . . . . . . . . . . . . . . . . . . . . . . .  3
     3.2   Call Setup . . . . . . . . . . . . . . . . . . . . . . . .  4
     3.3   Call Failure . . . . . . . . . . . . . . . . . . . . . . .  4
     3.4   Call End . . . . . . . . . . . . . . . . . . . . . . . . .  5
   4.  Call State Event Logs  . . . . . . . . . . . . . . . . . . . .  5
   5.  Call Resolution  . . . . . . . . . . . . . . . . . . . . . . .  5
       Author's Address . . . . . . . . . . . . . . . . . . . . . . .  7
   A.  Call State Event XML Schema  . . . . . . . . . . . . . . . . .  7
   B.  Example Call State Events  . . . . . . . . . . . . . . . . . . 14
   C.  Call Detail Record XML Schema  . . . . . . . . . . . . . . . . 16





















Lawrence                                                        [Page 1]

                            Call State Events              December 2004


1.  Overview

   PBX users often require the collection of call information in order
   to validate external billing or create internal charge-back systems.
   Due to the nature of SIP signalling and the disaggregated sipXpbx
   design, a complete record of a call can only be created by observing
   events that occur at different times and in different sipXpbx
   components.  This document specifies the events recorded and which
   component is responsible for producing a record of each.

   The record of each observed event is called a Call State Event.
   Section 3 describes each of the events to be recorded, the component
   responsible for it (called the "Observer"), the SIP request or
   response from which its information is derived, and the information
   it contains.

   The UTC time of events as recorded by each Observer is used to order
   the events, which is in some cases important to determining the
   semantics of the event.  As a result, it is important that all
   Observer clocks are as closely syncronized with each other as
   possible.

   The process of combining the information in a set of Call State
   Events to determine what happened with the call as whole is called
   Call Resolution; this step uses the events as input and produces a
   more traditional Call Detail Record - a single record per call.  This
   process is described in Section 5.

   Call State Events are encoded as XML according to the the schema in
   Appendix A.

1.1  Common Elements

   All Call State Events have some elements in common; in fact, most of
   each event consists of the common elements.  These common elements
   are:
   <observer> The DNS name of the system that observed the event.
   <obs_seq> The sequence number of this event at the observer.  This is
      used by a collector to detect that events from an observer are
      missing; in a complete record, there are no gaps in the sequence
      numbers.
   <obs_time> The (UTC) time at the observer when this event occured;
      this should be expressed to the millisecond, or as near to that as
      the Observer can measure.
   <call> The call element is a compound element that describes the call
      itself.  Its dialog component contains the key values used to
      determine which events are in the same call, and the full To and
      From header field values for display purposes.



Lawrence                                                        [Page 2]

                            Call State Events              December 2004


      <dialog> This value is used to correlate the separate events
         (which may even come from different observers) for the same
         call.  A dialog value has three components:
         <call_id> The value from the SIP Call-Id header.
         <from_tag> The value from the tag attribute of the SIP From
            header.  In dialogs begun by a UA that only comforms to RFC
            2543 this will be absent, so it may not appear in all
            events.
         <to_tag> The value from the tag attribute of the SIP To header.
            This element of a dialog is optional, and will not appear in
            all events.
      <from> The full From header field value.
      <to> The full From header field value.
      <via> A Via header value from the event; this element may appear
         more than once - the order is significant.  The Via elements in
         a CSE are ordered such that the first element is the Via value
         added by the message originator.

2.  Observer Message

   XML element name obs_msg
   Triggered by Any change in Observer status.
   Description Carries a status code for the new status and an optional
      arbitrary text message for display purposes.

   The Observer State Event is defined to signal changes in the Observer
   that may be useful to the interpretation of the Call State Events.
   At this writing, only one event is defined: the Restart (obs_status =
   0) event is sent when the Observer starts up.  It is always sent with
   observer sequence number 0 (zero).

   An Observer Message may contain an  is the schema URI that the
   observer is using in generating events.  Observers will typically log
   call events individually, without the call_event_sequence container
   (which would be the natural place for this URI).  This allows a
   post-processor to correctly construct an XML document without having
   the observer having to put the namespace on every element.

3.  Call State Events

3.1  Call Request

   XML element name call_request
   Triggered by A Call Request Event is generated by the sipXproxy server
      when an INVITE request is received that does not have a tag
      parameter on the To field value.





Lawrence                                                        [Page 3]

                            Call State Events              December 2004


   Description Represents an attempt to create a new call.  The
      <contact> element in this event is the calling party Contact
      header field value.

   Note that in the case of a spiral, where aliases and/or redirections
   cause new INVITE messages to be created, the same call generates
   multiple Call Request events.  Since it is possible for these
   different events to be recorded by different observers, the observer
   timestamp (not the observer sequence number) is used to determine the
   original event.

3.2  Call Setup

   XML element name call_setup
   Description Indicates acceptance of a call, or acceptance of a
      request to reconfigure a call.  The <contact> element in this
      event is the called party Contact header field value.
   Triggered by Any 2xx response to any INVITE request.

   This event is correlated with a Call Request event by comparing the
   call_id and from_tag values; the to_tag value will not appear in the
   original call_request event, so it is not used.

   Re-invites will appear as cse_setup events, so putting a call on hold
   or renegotiating the codecs during a call (as, for example, when
   another leg is added to a conference) will generate spurious
   cse_setup events.  These duplicates can be detected by detecting
   duplicate dialog ids and using only the one with the lowest observer
   timestamp (obs_time) value; this is the one that actually indicates
   that the call has been set up.

3.3  Call Failure

   XML element name cse_failure
   Description Indicates that at least one leg of a Call Request was
      rejected.
   Triggered by
         Any 5xx or 6xx response to an INVITE request,
         _or_ any 4xx response to an INVITE request _except_:
            401 Authentication Required
            407 Proxy Authentication Required
            408 Request timeout

   Depending on the specific failure mode and the retry behaviour of the
   servers and endpoints, there may be more than one Call Failed event
   for a given attempt to create a call; these should all have the same
   dialog ids.  A call state processor can only conclude that all given
   Call Request event ended in failure if there are no Call Setup events



Lawrence                                                        [Page 4]

                            Call State Events              December 2004


   for it and there are no missing events.

3.4  Call End

   XML element name cse_end
   Description Termination of a successful call.
   Triggered by Any BYE request.

   The Call End event is correlated with a Call Setup event using the
   dialog id.

4.  Call State Event Logs

    In the present implementation, Call Request, Call Setup, 
    Call Failure, and Call End events are logged by
    the sipX proxy in the file configured by the directive
    SIPX_PROXY_CALL_STATE_LOG (by default "sipxproxy_callstate.log" in
    the log directory).  

5.  Call Resolution

   The Call State Events described above are not a convenient form for
   applications such as billing or usage monitoring.  For these kinds of
   applications, a more suitable form would be a single record that
   included the parties to the call, when it occurred, and its duration.
   This form is usually called a Call Detail Record (CDR).  This section
   describes the algorithm for constructing CDRs from a set of Call
   State Events.

   * At this writing, we do not have an implementation of a resolver; if
   you would like to work on one and contribute it, please contact the
   project coordinator through the tracker or the sipx-dev mailing list.
   *

   In the following algorithm, the notation:

   /dest-ns:dest-element/dest-sub <- /src-ns:src-element/src-sub

    is used to indicate that the contents of element path
   /dest-element/dest-sub in the namespace dest-ns should be set from
   the contents of the element /src-element/src-sub from namespace
   src-ns.

   The namespaces used are:





Lawrence                                                        [Page 5]

                            Call State Events              December 2004


   cdr The Call Detail Records namespace:
      http://www.sipfoundry.org/sipX/schema/xml/cdr-01-00 (see
      Appendix C).
   cse The Call State Event namespace:
      http://www.sipfoundry.org/sipX/schema/xml/cse-01-00 (see
      Appendix A).

   To produce the Call Detail Records for a given set of Call State
   Events:
   1.  Select the events that relate to the same call using the
       information in the <cse:dialog> element.  The <cse:call_id>
       values must match exactly.  If present, the <cse:from> and
       <cse:to> values must not be different, but some events in the
       call may not have one or both of these, and should be considered
       to be a match so long as the <cse:call_id> value matches.
   2.  Order the events within a call by the value of the <obs_time>
       element.
   3.  Find the first <cse:call_request> event (if none is found, then
       some data is not available, and the data for this call is
       discarded).

   /cdr:call/caller/uri <- /cse:call_event/call_request/call/from
   /cdr:call/called/uri <- /cse:call_event/call_request/call/to
   /cdr:call/caller/endpoint <- /cse:call_event/call_request/via
   /cdr:call/caller/contact <- /cse:call_event/call_request/contact
   /cdr:call/start <- /cse:call_event/obs_time

   4.  If there is at least one <cse:call_setup> event, find the first
       <cse:call_setup> event

   /cdr:call/called/endpoint <- /cse:call_event/call_setup/via
   /cdr:call/called/contact <- /cse:call_event/call_setup/contact
   /cdr:call/setup <- /cse:call_event/obs_time

   5.  Provisionally set

   /cdr:call/completionCode <- CIP

   6.  Find the last <cse:call_end> event whose <cse:dialog> values
       exactly match those in the selected <cse:call_setup>.  If none is
       found, this is a partial record, and it will not have a
       <cdr:call_end> element.  If one is found, set:

   /cdr:call/end <- /cse:call_event/obs_time
   /cdr:call/completionCode <- CC

        If there was no <cse:call_setup> event, find the last
       <cse:call_failed> event and set:



Lawrence                                                        [Page 6]

                            Call State Events              December 2004


   /cdr:call/caller/endpoint <- /cse:call_event/call_failed/via
   /cdr:call/end <- /cse:call_event/obs_time
   /cdr:call/completionCode <- UC



Author's Address

   Scott Lawrence
   Pingtel Corp.

   Email: slawrence@pingtel.com

Appendix A.  Call State Event XML Schema

   <?xml version='1.0' encoding='iso-8859-1' standalone='yes'?>
   <!--
       XML Schema for sipX Call State Events
     -->
   <!-- ENTITY % sip_word "([&lt;&gt;&quot;a-zA-Z0-9.!&#x25;*_+`'~():\/[&#x5d;?{}-]+) -->
   <!-- ENTITY % sip_token "([a-zA-Z0-9.!&#x25;*_+`'~-]+)" -->
   <!-- ENTITY % dns_token "[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*" -->
   <schema
       xmlns:cse='http://www.sipfoundry.org/sipX/schema/xml/cse-01-00'
       targetNamespace='http://www.sipfoundry.org/sipX/schema/xml/cse-01-00'
       xmlns='http://www.w3.org/2001/XMLSchema'
       >
     <annotation>
       <documentation>
         sipX Call State Events
       </documentation>
       <documentation source='http://scm.sipfoundry.org/rep/sipXproxy/main/doc/call-state-events.html'/>
     </annotation>

   <!-- Types -->


     <simpleType name="dns_name">
       <annotation>
         <documentation>
           A DNS name.
         </documentation>
       </annotation>
       <restriction base="normalizedString">
         <pattern value="(([a-zA-Z0-9]+-)*[a-zA-Z0-9]+\.)*([a-zA-Z0-9]+-)*[a-zA-Z0-9]+">
           <annotation>
             <documentation>dns_token(\.dns_token)+</documentation>
           </annotation>



Lawrence                                                        [Page 7]

                            Call State Events              December 2004


         </pattern>
       </restriction>
     </simpleType>

     <simpleType name="dns_name_port">
       <annotation>
         <documentation>
           A DNS name with an optional port specification.
         </documentation>
       </annotation>
       <restriction base="normalizedString">
         <pattern value="(([a-zA-Z0-9]+-)*[a-zA-Z0-9]+\.)*([a-zA-Z0-9]+-)*[a-zA-Z0-9]+(:[0-9]+)?">
           <annotation>
             <documentation>dns_token(\.dns_token)+(:port)?</documentation>
           </annotation>
         </pattern>
       </restriction>
     </simpleType>

     <simpleType name="sip_tag">
       <annotation>
         <documentation>
           This type corresponds to the token 'tag' in RFC 3261 section
           25.1.
         </documentation>
         <documentation source='http://www.rfc-editor.org/rfc/rfc3261.txt'/>
       </annotation>
       <restriction base="normalizedString">
         <pattern value="([a-zA-Z0-9.!&#x25;*_+`'~\-]+)">
           <annotation>
             <documentation>sip_token</documentation>
           </annotation>
         </pattern>
       </restriction>
     </simpleType>

     <simpleType name="sip_call_id">
       <annotation>
         <documentation>
           This type corresponds to the token 'callid' in RFC 3261 section
           25.1.  Note that it does not, by itself, uniquely identify a
           dialog; that is identified by the complete dialog_id type.
         </documentation>
         <documentation source='http://www.rfc-editor.org/rfc/rfc3261.txt'/>
       </annotation>
       <restriction base="normalizedString">
         <pattern value="([&#x3c;&#x3e;&#x22;a-zA-Z0-9.!&#x25;*_+`'~():\\/\[\]?{}\-]+)@([&#x3c;&#x3e;&#x22;a-zA-Z0-9.!&#x25;*_+`'~():\\/\[\]?{}\-]+)">
            <annotation>



Lawrence                                                        [Page 8]

                            Call State Events              December 2004


              <documentation>sip_word@sip_word</documentation>
            </annotation>
         </pattern>
       </restriction>
     </simpleType>

     <simpleType name="sip_tofrom_value">
       <annotation>
         <documentation>
         The values allowed in the SIP To or From header fields.
         </documentation>
         <documentation source='http://www.rfc-editor.org/rfc/rfc3261.txt'/>
       </annotation>
       <restriction base="normalizedString"/>
     </simpleType>

     <simpleType name="sip_status">
       <annotation>
         <documentation>
           SIP Status codes
         </documentation>
         <documentation source='http://www.rfc-editor.org/rfc/rfc3261.txt'/>
       </annotation>
       <restriction base="positiveInteger">
         <minInclusive value='100' />
         <maxExclusive value='700' />
       </restriction>
     </simpleType>

     <simpleType name="obs_status_code">
       <annotation>
         <documentation>
           CSE Observer status
         </documentation>
       </annotation>
       <restriction base="positiveInteger">
         <enumeration value='101'>
           <annotation>
             <documentation>Observer Reset</documentation>
           </annotation>
         </enumeration>
       </restriction>
     </simpleType>


   <!-- Elements -->

     <element name='call_event_sequence'>



Lawrence                                                        [Page 9]

                            Call State Events              December 2004


       <annotation>
         <documentation>
           A container for a set of call_event elements
         </documentation>
       </annotation>
       <complexType>
         <sequence>
           <element ref='cse:call_event' minOccurs='0' maxOccurs='unbounded'/>
         </sequence>
       </complexType>
     </element>

     <element name='call_event'>
       <annotation>
         <documentation>
         A single call_event is generated for each event
         seen by a CSE Observer.  They are sent to a CSE Collector, whose
         reponsibilty is to store and make available the information from a
         set of CSE Observers.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:observer'/>
             <element ref='cse:obs_seq'/>
             <element ref='cse:obs_time'/>
             <choice>
               <element ref='cse:obs_msg'/>
               <element ref='cse:call_request'/>
               <element ref='cse:call_setup'/>
               <element ref='cse:call_failure'/>
               <element ref='cse:call_end'/>
             </choice>
         </sequence>
       </complexType>
     </element>

     <element name='obs_msg'>
       <annotation>
         <documentation>
         This element conveys information about the state of an
         observer.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:obs_status'/>
             <element ref='cse:obs_text' minOccurs='0'/>



Lawrence                                                       [Page 10]

                            Call State Events              December 2004


             <element name='schema' type='anyURI' minOccurs='0'>
               <annotation>
                 <documentation>
                   If present, this is the schema URI that the observer is using in generating
                   events.  Observers will typically log call events individually, without the
                   call_event_sequence container (which would be the natural place for this
                   URI).  This allows a post-processor to correctly construct an XML document
                   without having the observer having to put the namespace on every element.
                 </documentation>
               </annotation>
             </element>
         </sequence>
       </complexType>
     </element>

     <element name='obs_status' type='cse:obs_status_code'/>

     <element name='obs_text' type='normalizedString'/>

     <element name='call_request'>
       <annotation>
         <documentation>
         This identifies a call attempt.
         The contact in this event is the calling party.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:call'/>
             <element ref='cse:contact'/>
             <element ref='cse:via' maxOccurs='unbounded'/>
         </sequence>
       </complexType>
     </element>

     <element name='call_setup'>
       <annotation>
         <documentation>
         This identifies a successful call completion.
         The contact in this event is the called party.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:call'/>
             <element ref='cse:contact'/>
             <element ref='cse:via' maxOccurs='unbounded'/>
         </sequence>



Lawrence                                                       [Page 11]

                            Call State Events              December 2004


       </complexType>
     </element>

     <element name='call_end'>
       <annotation>
         <documentation>
         This identifies the termination of a call.
         It records the BYE request.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:call'/>
             <element ref='cse:via' maxOccurs='unbounded'/>
         </sequence>
       </complexType>
     </element>

     <element name='call_failure'>
       <annotation>
         <documentation>
         This identifies a failure in response to a call request.
         It indicates a permanent failure response to an INVITE.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:call'/>
             <element ref='cse:response'/>
             <element ref='cse:via' maxOccurs='unbounded'/>
         </sequence>
       </complexType>
     </element>

     <element name='call'>
       <complexType>
         <sequence>
             <element ref='cse:dialog'/>
             <element ref='cse:to'/>
             <element ref='cse:from'/>
         </sequence>
       </complexType>
     </element>

     <element name='dialog'>
       <annotation>
         <documentation>
         This uniquely identifies a call.



Lawrence                                                       [Page 12]

                            Call State Events              December 2004


         </documentation>
       </annotation>
       <complexType>
         <sequence>
             <element ref='cse:call_id'/>
             <element ref='cse:from_tag' minOccurs='0'/>
             <element ref='cse:to_tag' minOccurs='0'/>
         </sequence>
       </complexType>
     </element>

     <element name='observer' type='cse:dns_name_port'>
       <annotation>
         <documentation>
         The DNS name of the commserver host that observed this event.
         </documentation>
       </annotation>
     </element>

     <element name='obs_seq' type='unsignedLong'/>

     <element name='obs_time' type='dateTime'/>

     <element name='call_id' type='cse:sip_call_id' />

     <element name='from_tag' type='cse:sip_tag' />

     <element name='to_tag' type='cse:sip_tag' />

     <element name='from' type='cse:sip_tofrom_value' />

     <element name='to' type='cse:sip_tofrom_value' />

     <element name='response'>
       <complexType>
         <sequence>
             <element ref='cse:status'/>
             <element ref='cse:reason'/>
         </sequence>
       </complexType>
     </element>

     <element name='status' type='cse:sip_status'/>

     <element name='reason' type='normalizedString'/>

     <element name='via' type='normalizedString'/>




Lawrence                                                       [Page 13]

                            Call State Events              December 2004


     <element name='contact' type='normalizedString'/>

   </schema>



Appendix B.  Example Call State Events

   <call_event_sequence
    xmlns='http://www.sipfoundry.org/sipX/schema/xml/cse-01-00'
    >
   <call_event>
     <observer>out1.sipxchange.example.com</observer>
     <obs_seq>0</obs_seq>
     <obs_time>2003-08-15T17:22:30.090Z</obs_time>
     <obs_msg>
       <obs_status>101</obs_status>
       <obs_text>Observer Restart</obs_text>
     </obs_msg>
   </call_event>

   <call_event>
     <observer>out1.sipxchange.example.com</observer>
     <obs_seq>288</obs_seq>
     <obs_time>2003-08-15T17:24:30.085Z</obs_time>
     <call_request>
       <call>
         <dialog>
           <call_id>call-1063657885-12@10.1.1.252</call_id>
           <from_tag>1c954235820</from_tag>
         </dialog>
         <to>Some Phone&lt;sip:162@example.com&gt;;transport=tcp</to>
         <from>"Scott"&lt;sip:scott-ix@kathmandu.example.com&gt;;tag=1c954235820</from>
       </call>
       <contact>&lt;sip:scott-ix@10.1.1.252:9999&gt;</contact>
       <via>SIP/2.0/TCP 10.5.6.6;branch=z9hG4bK687e5283dc2bac23258891f6502534a4</via>
     </call_request>
   </call_event>

   <call_event>
     <observer>out1.sipxchange.example.com</observer>
     <obs_seq>288</obs_seq>
     <obs_time>2003-08-15T17:25:30.023Z</obs_time>
     <call_setup>
       <call>
         <dialog>
           <call_id>call-1063657885-12@10.1.1.252</call_id>
           <from_tag>1c954235820</from_tag>



Lawrence                                                       [Page 14]

                            Call State Events              December 2004


           <to_tag>c1592453082</to_tag>
         </dialog>
         <to>Some Phone&lt;sip:162@example.com&gt;;tag=c1592453082,transport=tcp</to>
         <from>"Scott"&lt;sip:scott-ix@kathmandu.example.com&gt;;tag=1c954235820</from>
       </call>
       <contact>&lt;sip:scott-ix@10.1.1.166:5060&gt;</contact>
       <via>SIP/2.0/TCP 10.5.6.6;branch=z9hG4bK687e5283dc2bac232577f1f6502534a4</via>
     </call_setup>
   </call_event>

   <call_event>
     <observer>out1.sipxchange.example.com</observer>
     <obs_seq>290</obs_seq>
     <obs_time>2003-08-15T17:27:30.023Z</obs_time>
     <call_failure>
       <call>
         <dialog>
           <call_id>call-1036576858-13@10.1.1.252</call_id>
           <from_tag>1c954235820</from_tag>
         </dialog>
         <to>Some Phone&lt;sip:162@example.com&gt;transport=tcp</to>
         <from>"Scott"&lt;sip:scott-ix@kathmandu.example.com&gt;;tag=1c954235820</from>
       </call>
       <response>
         <status>403</status>
         <reason>Permission Denied</reason>
       </response>
       <via>SIP/2.0/TCP 10.5.6.6;branch=z9hG4bK687e5283dc2bac232577f1f654444444</via>
     </call_failure>
   </call_event>

   <call_event>
     <observer>out1.sipxchange.example.com</observer>
     <obs_seq>312</obs_seq>
     <obs_time>2003-08-15T17:45:30.023Z</obs_time>
     <call_end>
       <call>
         <dialog>
           <call_id>call-1063657885-12@10.1.1.252</call_id>
           <from_tag>1c954235820</from_tag>
           <to_tag>c1592453082</to_tag>
         </dialog>
         <to>Some Phone&lt;sip:162@example.com&gt;;tag=c1592453082,transport=tcp</to>
         <from>"Scott"&lt;sip:scott-ix@kathmandu.example.com&gt;;tag=1c954235820</from>
       </call>
       <via>SIP/2.0/TCP 10.5.6.6;branch=z9hG4bK687e5283dc2bac232577f1f659999999</via>
     </call_end>
   </call_event>



Lawrence                                                       [Page 15]

                            Call State Events              December 2004


   </call_event_sequence>



Appendix C.  Call Detail Record XML Schema

   <?xml version='1.0' encoding='iso-8859-1' standalone='yes'?>
   <!DOCTYPE schema [
   <!ENTITY % sip_word "([&lt;&gt;&quot;a-zA-Z0-9.!&#x25;*_+`'~():\/[&#x5d;?{}-]+)">
   <!ENTITY % sip_token "([a-zA-Z0-9.!&#x25;*_+`'~-]+)">
   ]>
   <!--
       XML Schema for sipX Call Detail Records
     -->
   <schema
       xmlns:cdr='http://www.sipfoundry.org/sipX/schema/xml/cdr-01-00'
       targetNamespace='http://www.sipfoundry.org/sipX/schema/xml/cdr-01-00'
       xmlns='http://www.w3.org/2001/XMLSchema'
       >
     <annotation>
       <documentation>
         sipX Call Detail Records
       </documentation>
       <documentation source='http://scm.sipfoundry.org/rep/sipXproxy/main/doc/call-detail-records.html'/>
     </annotation>

   <!-- Types -->

     <simpleType name="sip_tofrom_value">
       <annotation>
         <documentation>
         The values allowed in the SIP To or From header fields.
         </documentation>
         <documentation source='http://www.rfc-editor.org/rfc/rfc3261.txt'/>
       </annotation>
       <restriction base="normalizedString"/>
     </simpleType>

     <complexType name='party'>
       <sequence>
         <element ref='cdr:uri'     type='cdr:sip_tofrom_value'/>
         <element ref='cdr:endpoint' type='normalizedString'/>
         <element ref='cdr:contact' type='cdr:sip_tofrom_value' minOccurs='0'/>
       </sequence>
     </complexType>

     <simpleType name="call_result">
       <annotation>



Lawrence                                                       [Page 16]

                            Call State Events              December 2004


         <documentation>
           Final result of an attempted call.
           These values are adapted from those specified by:
              Network Data Management Usage (NDM-U)
              For IP-Based Services Service Specification
              Voice over IP (VoIP)
              Version 3.1-A.0.2
              August 21, 2002
              © 1999-2002 IPDR, Inc.
         </documentation>
       </annotation>
       <restriction base="normalizedString">
         <enumeration value="CC">
           <annotation>
             <documentation>
               Call completed normally.
             </documentation>
           </annotation>
         </enumeration>
         <enumeration value="CAD">
           <annotation>
             <documentation>
               Abnormal disconnect
             </documentation>
           </annotation>
         </enumeration>
         <enumeration value="UC">
           <annotation>
             <documentation>
               Unconnected.
               The IPDR.org specification makes the distinction between
                 UCN - network failure
                 UCI - invalid address
               This specification folds both of these into this status.
             </documentation>
           </annotation>
         </enumeration>
         <enumeration value="CIP">
           <annotation>
             <documentation>
               Call In Progress.
             </documentation>
           </annotation>
         </enumeration>
       </restriction>
     </simpleType>





Lawrence                                                       [Page 17]

                            Call State Events              December 2004


   <!-- Elements -->

     <element name='calls'>
       <complexType>
         <sequence>
           <element ref='cdr:call_detail' maxOccurs='unbounded'/>
         </sequence>
       </complexType>
     </element>

     <element name='call'>
       <annotation>
         <documentation>
         A single call element is generated for each attempted call.
         </documentation>
       </annotation>
       <complexType>
         <sequence>
           <element name='caller' type='cdr:party'/>
           <element name='called' type='cdr:party'/>
           <element name='completionCode' type='cdr:call_result'/>
           <element name='start' type='dateTime'/>
           <element name='setup' type='dateTime' minOccurs='0'/>
           <element name='end'   type='dateTime' minOccurs='0'/>
         </sequence>
       </complexType>
     </element>

   </schema>






















Lawrence                                                       [Page 18]

