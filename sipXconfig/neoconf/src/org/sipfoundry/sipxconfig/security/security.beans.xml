<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
  "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context containing authentication, channel
  - security and web URI beans.
  -
  - Only used by "filter" artifact.
  -
  - Adapted from acegisecurity/samples/contacts/src/main/webapp/filter/WEB-INF/applicationContext-acegi-security.xml .
  -->

<beans>
  
  <!-- ======================== FILTER CHAIN ======================= -->
  
  <!--  if you wish to use channel security, add "channelProcessingFilter," in front
  of "httpSessionContextIntegrationFilter" in the list below -->
  <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        /(services|rest|initial-config)/.*=httpSessionContextIntegrationFilter,basicProcessingFilter,securityEnforcementFilter
        </value>
    </property>
  </bean>
  
  <!-- ======================== AUTHENTICATION ======================= -->
  
  <bean id="authenticationManager"
    class="org.acegisecurity.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="daoAuthenticationProvider"/>
      </list>
    </property>
  </bean>
  
  <bean id="authenticationDaoImpl"
    class="org.sipfoundry.sipxconfig.security.AuthenticationDaoImpl">
    <property name="coreContext">
      <ref bean="coreContext"/>
    </property>
    <property name="locationsManager">
      <ref bean="locationsManager"/>
    </property>
  </bean>
  
  <bean id="passwordEncoder"
    class="org.sipfoundry.sipxconfig.security.PasswordEncoderImpl">
    <property name="loginContext">
      <ref bean="loginContext"/>
    </property>    
  </bean>
  
  <bean id="saltSource"
    class="org.sipfoundry.sipxconfig.security.SaltSourceImpl">
  </bean>
  
  <bean id="daoAuthenticationProvider"
    class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService">
      <ref local="authenticationDaoImpl"/>
    </property>
    <property name="userCache">
      <ref local="userCache"/>
    </property>
    <property name="passwordEncoder">
      <ref local="passwordEncoder"/>
    </property>
    <property name="saltSource">
      <ref local="saltSource"/>
    </property>
  </bean>
  
  <bean id="cacheManager"
    class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
  
  <bean id="userCacheBackend"
    class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheManager">
      <ref local="cacheManager"/>
    </property>
    <property name="cacheName">
      <value>userCache</value>
    </property>
  </bean>
  
  <bean id="userCache"
    class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
    <property name="cache">
      <ref local="userCacheBackend"/>
    </property>
  </bean>
  
  <!-- Automatically receives AuthenticationEvent messages from DaoAuthenticationProvider -->
  <!-- Don't use LoggerListener until we turn off the noise from logging all successful authentication events -->
  <!-- bean id="loggerListener"
    class="org.acegisecurity.event.authentication.LoggerListener"/ -->
  
  <bean id="httpSessionContextIntegrationFilter"
    class="org.acegisecurity.context.HttpSessionContextIntegrationFilter">
  </bean>

  <!-- ===================== HTTP REQUEST SECURITY ==================== -->
  
  <bean id="securityEnforcementFilter"
    class="org.acegisecurity.intercept.web.SecurityEnforcementFilter">
    <property name="filterSecurityInterceptor">
      <ref local="filterInvocationInterceptor"/>
    </property>
    <property name="authenticationEntryPoint">
      <ref local="basicProcessingFilterEntryPoint"/>
    </property>
  </bean>
  
  <bean id="basicProcessingFilter"
    class="org.acegisecurity.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager">
      <ref local="authenticationManager"/>
    </property>
    <property name="authenticationEntryPoint">
      <ref local="basicProcessingFilterEntryPoint"/>
    </property>
  </bean>
  
  <bean id="basicProcessingFilterEntryPoint"
    class="org.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
    <property name="realmName">
      <value>sipXconfig realm</value>
    </property>
  </bean>
    
  <bean id="httpRequestAccessDecisionManager"
    class="org.acegisecurity.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions">
      <value>false</value>
    </property>
    <property name="decisionVoters">
      <list>
        <ref bean="roleVoter"/>
      </list>
    </property>
  </bean>

  <!-- 
    - An access decision voter that reads ROLE_* configuration settings.
    - See acegisecurity/samples/contacts/src/main/webapp/common/WEB-INF/applicationContext-common-authorization.xml .
    -->
  <bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter"/>
  
  <!-- Note the order that entries are placed against the objectDefinitionSource is critical.
  The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that matches the request URL.
  
  Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
  <bean id="filterInvocationInterceptor"
    class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref local="httpRequestAccessDecisionManager"/>
    </property>
    <property name="objectDefinitionSource">
      <value> CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        /rest/call/.*=ROLE_USER
        /rest/my/.*=ROLE_USER
        /(services|rest)/.*=ROLE_ADMIN
        /initial-config/.*=ROLE_LOCATION</value>
    </property>
  </bean>
  
</beans>