#!/bin/bash
#
# chkconfig: 35 90 10
# description: This script starts up a dedicated instance of syslogd to receive logging from phones
#
# processname: phonelog
# pidfile: @SIPX_LOGDIR@/phonelog/var/run/syslog.pid
#
# Copyright (C) 2009 Nortel Networks, certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.
#
### BEGIN INIT INFO
# Provides:       phonelog
# Required-Start: $network $remote_fs
# Required-Stop:
# Default-Start:  3 5
# Default-Stop:
# Description:    Start the syslog instance for logging from phones
### END INIT INFO

# This is an interactive program; we need the current locale.
[ -f /etc/profile.d/lang.sh ] && . /etc/profile.d/lang.sh

if [ "$LANG" = "ja" -o "$LANG" = "ja_JP.eucJP" ]; then
    # We can't Japanese on normal console at boot time.
    # So, force to set LANG=C
    if [ "$TERM" = "linux" ] ; then
        LANG=C
    fi
fi

## Source function library.
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit 1

if [ -z "@SYSLOG_CMD@" ]
then
   echo "No syslog daemon command detected for this platform" 1>&2
   exit 1
fi

ExitStatus=0

Enabled=`sipx_config_value @SIPX_CONFDIR@/phonelog-config PHONELOG_ENABLED`

PhoneLogRoot=@SIPX_LOGDIR@/phonelog
# PidFile must agree with 'pidfile:' line in comments above
#   this is actually fixed because on CentOS5 it cannot be changed
PidFile=${PhoneLogRoot}/var/run/syslogd.pid

as_sipxpbxuser () {
    iam=`whoami`
    if [ "${iam}" = "root" ]
    then
        exec su @SIPXPBXUSER@ -c "$0 $*"
    elif [ "${iam}" != "@SIPXPBXUSER@" ]
    then
        echo "$0 $* must be run as either root or @SIPXPBXUSER@" 1>&2
        exit 1
    fi
}

do_start () {
    ## set up the chroot environment (done as SIPXPBXUSER)
    $0 setup
    chroot ${PhoneLogRoot} @SYSLOG_CMD@ @SYSLOG_ARGS@
}

do_stop () {
    if [ -e ${PidFile} ]
    then
        running=`cat ${PidFile} 2>/dev/null`
        if [ -n "${running}" ] && proc_alive ${running}
        then
            kill -TERM "${running}"
        fi
        rm -f ${PidFile}
    fi
}

do_setup () {
    # if needed, construct the chroot environment for the phonelog daemon
    test -d ${PhoneLogRoot}         || mkdir ${PhoneLogRoot}
    test -d ${PhoneLogRoot}/dev     || mkdir ${PhoneLogRoot}/dev # needed for socket we don't use
    test -d ${PhoneLogRoot}/var     || mkdir ${PhoneLogRoot}/var 
    test -d ${PhoneLogRoot}/var/run || mkdir ${PhoneLogRoot}/var/run # needed for pid file
    
    # copy the configuration into the chroot
    cp @SIPX_CONFDIR@/phonelog.conf ${PhoneLogRoot}/phonelog.conf

    # link any dynamic libraries needed by the daemon executable
    for lib in @SYSLOG_CMD@ @SYSLOG_LIBS@ \
        $(ldd @SYSLOG_CMD@ | perl -pe 's|^.*=>\s*||; s|\s*\(.*$||; s|^\s*||')
    do
        libdir=$(dirname ${lib})
        test -d ${PhoneLogRoot}${libdir} || mkdir -p ${PhoneLogRoot}${libdir}
        if [ -e ${PhoneLogRoot}${lib} ] 
        then
            if ! cmp ${lib} ${PhoneLogRoot}${lib} 2> /dev/null
            then
                rm -f ${PhoneLogRoot}${lib}
                cp ${lib} ${PhoneLogRoot}${lib}
            fi
        else
            cp ${lib} ${PhoneLogRoot}${lib}
        fi
    done
}

if [ "${Enabled}" = "TRUE" ]
then
   case "$1" in
     start)
           ### Verify that the sipXecs services are not already running.
           if [ -e ${PidFile} ]
           then
               echo "   Found ${PidFile}..."
               echo "         checking for running phonelog process..."
               running=`cat ${PidFile} 2>/dev/null`
               if [ -n "${running}" ] && proc_alive ${running}
               then
                   echo -n " The sipXecs phonelog may already be running (pid ${running})."
                   echo -n " Try stop or restart."
                   echo_failure
                   echo ""
                   ExitStatus=1
               else
                   # stale pid file found? - do stop just in case
                   echo " phonelog not found - running restart to clean locks."
                   do_stop
                   do_start
                   ExitStatus=$?
               fi
           else
               do_start
               ExitStatus=$?
           fi
           ;;
     stop)
           do_stop
           ;;
     status)
           if [ -e ${PidFile} ]
           then
               running=`cat ${PidFile} 2>/dev/null`
               if [ -n "${running}" ] && proc_alive ${running}
               then
                  ExitStatus=0
                  echo "running (${running})"
               else
                  ExitStatus=1
                  echo "process not found - try restart"
               fi
           else
               ExitStatus=0
               echo "not running"
           fi
           ;;

     configtest)
           test -r @SIPX_CONFDIR@/phonelog.conf
           ExitStatus=$?
           ;;

     reconfigure)
           if [ -e ${PidFile} ]
           then
               running=`cat ${PidFile} 2>/dev/null`
               if [ -n "${running}" ] && proc_alive ${running}
               then
                  kill -HUP ${running}
               else
                  ExitStatus=1
                  echo "process not found - try restart"
               fi
           else
               ExitStatus=0
               echo "not running"
           fi
           ;;

     restart)
           do_stop
           do_start
           ExitStatus=$?
           ;;

     setup)
           as_sipxpbxuser $* # ensures that setup is run as @SIPXPBXUSER@
           do_setup
           ;;

     *)
           echo $"Usage: $0 {start|stop|status|configtest|reconfigure|setup|restart}"
           exit 1
   esac
else
   ExitStatus=1
   echo "Not enabled in @SIPX_CONFDIR@/phonelog-config" 1>&2
fi

exit ${ExitStatus}
