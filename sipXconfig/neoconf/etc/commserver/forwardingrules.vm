<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- DO NOT EDIT THIS FILE. It is generated by sipXconfig web ui -->
<routes xmlns='http://www.sipfoundry.org/sipX/schema/xml/forwardingrules-00-00'>
  <route mappingType="local">
    <description>
      Matches the SIPXCHANGE_DOMAIN_NAME (and all aliases for it).
      Routes SUBSCRIBE for message waiting indication to the status server.
      Routes SUBSCRIBE for "reg" events to the reg event server.
      All other requests go to the SIP registry/redirect service.
    </description>

    <routeFrom>${dollar}{SIPXCHANGE_DOMAIN_NAME}:${dollar}{PROXY_SERVER_SIP_PORT}</routeFrom>
    <routeFrom>${dollar}{MY_IP_ADDR}:${dollar}{PROXY_SERVER_SIP_PORT}</routeFrom>
    <routeFrom>${dollar}{MY_FULL_HOSTNAME}:${dollar}{PROXY_SERVER_SIP_PORT}</routeFrom>
    <routeFrom>${dollar}{MY_HOSTNAME}:${dollar}{PROXY_SERVER_SIP_PORT}</routeFrom>
#foreach ($route in ${routes})
    <routeFrom>$route</routeFrom>
#end	    
    <methodMatch>
      <methodPattern>SUBSCRIBE</methodPattern>

      <!-- Message waiting indication events -->
      <fieldMatch fieldName="Event">
        <fieldPattern>message-summary.*</fieldPattern>
        <!--this goes to the status server-->
        <routeTo>&lt;${dollar}{STATUS_SERVER_SIP_SRV_OR_HOSTPORT};transport=tcp&gt;</routeTo>
      </fieldMatch>

      <!-- "reg" event subscriptions. -->
      <fieldMatch fieldName="Event">
        <fieldPattern>reg</fieldPattern>
        <routeTo>&lt;${dollar}{REGISTRAR_REG_EVENT_SIP_SRV_OR_HOSTPORT};transport=tcp&gt;</routeTo>
      </fieldMatch>

      <!-- All other SUBSCRIBE requests go to the SIP registry service -->
      <routeTo>&lt;${dollar}{REGISTRAR_SERVER_SIP_SRV_OR_HOSTPORT};transport=tcp;x-sipx-routetoreg&gt;</routeTo>

    </methodMatch>

    <!-- All other requests go to the SIP registry service -->
    <routeTo>&lt;${dollar}{REGISTRAR_SERVER_SIP_SRV_OR_HOSTPORT};transport=tcp;x-sipx-routetoreg&gt;</routeTo>

  </route>

#if(${sbc.enabled})
  #if(${exportLocalIpAddress})
    <route mappingType='local ip address'>
      <description>
        Any host address in the local subnets is routed to the auth proxy.
      </description>

    #foreach($subnet in ${sbc.routes.subnets})
      <routeIPv4subnet>$subnet</routeIPv4subnet>
    #end

    #foreach($domain in ${sbc.routes.domains})
      <routeDnsWildcard>$domain</routeDnsWildcard>
    #end

      <routeTo authRequired="true"/>
    </route>
  #end

  #foreach($auxSbc in $auxSbcs)
    #if($auxSbc.enabled)
  <route mappingType='auxiliary SBC'>
    <description>
      Subnets and domains routed to ${auxSbc.sbcDevice.address}
    </description>

      #foreach($subnet in ${auxSbc.routes.subnets})
    <routeIPv4subnet>$subnet</routeIPv4subnet>
      #end

      #foreach($domain in ${auxSbc.routes.domains})
    <routeDnsWildcard>$domain</routeDnsWildcard>
      #end

    <routeTo authRequired="true">${auxSbc.sbcDevice.address}</routeTo>
  </route>
    #end
  #end
  <route mappingType='external destinations'>
    <description>
      Any foreign domain - route via session border.
    </description>

    <routeDnsWildcard>*</routeDnsWildcard>
    <routeIPv4subnet>0/0</routeIPv4subnet>

    <routeTo authRequired="true">${sbc.sbcDevice.address}</routeTo>
  </route>
#end
</routes>
