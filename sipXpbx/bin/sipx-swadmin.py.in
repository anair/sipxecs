#! /usr/bin/env python

#----------------------------------------------------------------------
#
# Copyright (C) 2008 Nortel Networks
#
# This script drives the software admin package update process, 
# interacting with Yum and presenting output in a friendly 
# manner.           
#
#----------------------------------------------------------------------

import yum, sys, os
from subprocess import Popen, PIPE

# Checks for updated sipXecs packages.
def check_update():
    print "# Package Name|Installed Version|Updated Version"
    yumBase = yum.YumBase()
    yumBase.repos.disableRepo("*")
    yumBase.repos.enableRepo("sipxecs*")
    packages = yumBase.doPackageLists('updates')

    for package in packages.updates:
        installedPackage = yumBase.rpmdb.searchAll(package.name)[0]
        print package.name + "|" + installedPackage.ver + "-" + installedPackage.release + "|" + package.ver + "-" + package.release

    sys.stderr.write('***END***\n')
    sys.stdout.write('***END***\n')
    sys.stdout.flush()
    sys.stderr.flush()

# Checks the version of sipXecs installed on the system.
# The version of the main sipxecs package is checked, and that version number is used.
def check_version():
    yumBase = yum.YumBase()
    sipxecs = yumBase.rpmdb.searchAll("sipx*")
    if len(sipxecs) > 0:
       print sipxecs[0].name + " " + sipxecs[0].ver + "-" + sipxecs[0].release
    else:
       print "No package sipxecs found"

    sys.stderr.write('***END***\n')
    sys.stdout.write('***END***\n')
    sys.stdout.flush()
    sys.stderr.flush()
    
# Downloads and installs updated packages for the system    
def update():
    print "Downloading and installing updated packages...\n\n"
    sys.stdout.flush()
    yumProcess = os.system("yum update -y --disablerepo=* --enablerepo=sipxecs*")
    sys.stdout.flush()
    print "Package update complete.\n"
    print "Restarting sipxecs services...\n"
    sys.stdout.flush()
    os.system("@SERVICEDIR@/sipxpbx restart")
    sys.stderr.write('***END***\n')
    sys.stdout.write('***END***\n')
    sys.stdout.flush()
    sys.stderr.flush()
    
def usage():
    print """
        Usage: sipx-swadmin.py <command>


        Valid commands:
          check-update      Check for updated sipx packages
          update            Update packages on the system
          version           Show installed sipXecs version
    """
    sys.exit(1);

#======================================================================
# MAIN SCRIPT BODY STARTS HERE
#======================================================================

if len(sys.argv) < 2:
    usage()
    quit()
if sys.argv[1] == "check-update":
    check_update()
elif sys.argv[1] == "version":
    check_version()
elif sys.argv[1] == "update":
    update()    
else:
    usage()

